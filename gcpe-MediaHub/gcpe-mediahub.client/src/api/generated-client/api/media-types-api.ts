/* tslint:disable */
/* eslint-disable */
/**
 * GCPE Media Hub 2.0 API
 * GCPE Media Hub 2.0
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MediaType } from '../model';
/**
 * MediaTypesApi - axios parameter creator
 * @export
 */
export const MediaTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaTypesIdDelete', 'id', id)
            const localVarPath = `/api/MediaTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaTypesIdGet', 'id', id)
            const localVarPath = `/api/MediaTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {MediaType} [mediaType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesIdPut: async (id: number, mediaType?: MediaType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMediaTypesIdPut', 'id', id)
            const localVarPath = `/api/MediaTypes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MediaType} [mediaType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesPost: async (mediaType?: MediaType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/MediaTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mediaType, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaTypesApi - functional programming interface
 * @export
 */
export const MediaTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MediaTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaTypesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MediaType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaTypesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaTypesApi.apiMediaTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaTypesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaTypesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaTypesApi.apiMediaTypesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaTypesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaTypesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaTypesApi.apiMediaTypesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {MediaType} [mediaType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaTypesIdPut(id: number, mediaType?: MediaType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaTypesIdPut(id, mediaType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaTypesApi.apiMediaTypesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MediaType} [mediaType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMediaTypesPost(mediaType?: MediaType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMediaTypesPost(mediaType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MediaTypesApi.apiMediaTypesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MediaTypesApi - factory interface
 * @export
 */
export const MediaTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MediaTypesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<MediaType>> {
            return localVarFp.apiMediaTypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaTypesApiApiMediaTypesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesIdDelete(requestParameters: MediaTypesApiApiMediaTypesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaTypesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaTypesApiApiMediaTypesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesIdGet(requestParameters: MediaTypesApiApiMediaTypesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MediaType> {
            return localVarFp.apiMediaTypesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaTypesApiApiMediaTypesIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesIdPut(requestParameters: MediaTypesApiApiMediaTypesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiMediaTypesIdPut(requestParameters.id, requestParameters.mediaType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MediaTypesApiApiMediaTypesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMediaTypesPost(requestParameters: MediaTypesApiApiMediaTypesPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<MediaType> {
            return localVarFp.apiMediaTypesPost(requestParameters.mediaType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiMediaTypesIdDelete operation in MediaTypesApi.
 * @export
 * @interface MediaTypesApiApiMediaTypesIdDeleteRequest
 */
export interface MediaTypesApiApiMediaTypesIdDeleteRequest {
    /**
     * 
     * @type {number}
     * @memberof MediaTypesApiApiMediaTypesIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiMediaTypesIdGet operation in MediaTypesApi.
 * @export
 * @interface MediaTypesApiApiMediaTypesIdGetRequest
 */
export interface MediaTypesApiApiMediaTypesIdGetRequest {
    /**
     * 
     * @type {number}
     * @memberof MediaTypesApiApiMediaTypesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiMediaTypesIdPut operation in MediaTypesApi.
 * @export
 * @interface MediaTypesApiApiMediaTypesIdPutRequest
 */
export interface MediaTypesApiApiMediaTypesIdPutRequest {
    /**
     * 
     * @type {number}
     * @memberof MediaTypesApiApiMediaTypesIdPut
     */
    readonly id: number

    /**
     * 
     * @type {MediaType}
     * @memberof MediaTypesApiApiMediaTypesIdPut
     */
    readonly mediaType?: MediaType
}

/**
 * Request parameters for apiMediaTypesPost operation in MediaTypesApi.
 * @export
 * @interface MediaTypesApiApiMediaTypesPostRequest
 */
export interface MediaTypesApiApiMediaTypesPostRequest {
    /**
     * 
     * @type {MediaType}
     * @memberof MediaTypesApiApiMediaTypesPost
     */
    readonly mediaType?: MediaType
}

/**
 * MediaTypesApi - object-oriented interface
 * @export
 * @class MediaTypesApi
 * @extends {BaseAPI}
 */
export class MediaTypesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypesApi
     */
    public apiMediaTypesGet(options?: RawAxiosRequestConfig) {
        return MediaTypesApiFp(this.configuration).apiMediaTypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaTypesApiApiMediaTypesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypesApi
     */
    public apiMediaTypesIdDelete(requestParameters: MediaTypesApiApiMediaTypesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return MediaTypesApiFp(this.configuration).apiMediaTypesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaTypesApiApiMediaTypesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypesApi
     */
    public apiMediaTypesIdGet(requestParameters: MediaTypesApiApiMediaTypesIdGetRequest, options?: RawAxiosRequestConfig) {
        return MediaTypesApiFp(this.configuration).apiMediaTypesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaTypesApiApiMediaTypesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypesApi
     */
    public apiMediaTypesIdPut(requestParameters: MediaTypesApiApiMediaTypesIdPutRequest, options?: RawAxiosRequestConfig) {
        return MediaTypesApiFp(this.configuration).apiMediaTypesIdPut(requestParameters.id, requestParameters.mediaType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MediaTypesApiApiMediaTypesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaTypesApi
     */
    public apiMediaTypesPost(requestParameters: MediaTypesApiApiMediaTypesPostRequest = {}, options?: RawAxiosRequestConfig) {
        return MediaTypesApiFp(this.configuration).apiMediaTypesPost(requestParameters.mediaType, options).then((request) => request(this.axios, this.basePath));
    }
}

