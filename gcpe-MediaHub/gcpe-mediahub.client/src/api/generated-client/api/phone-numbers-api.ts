/* tslint:disable */
/* eslint-disable */
/**
 * GCPE Media Hub 2.0 API
 * GCPE Media Hub 2.0
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PhoneNumber } from '../model';
/**
 * PhoneNumbersApi - axios parameter creator
 * @export
 */
export const PhoneNumbersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PhoneNumbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPhoneNumbersIdDelete', 'id', id)
            const localVarPath = `/api/PhoneNumbers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPhoneNumbersIdGet', 'id', id)
            const localVarPath = `/api/PhoneNumbers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PhoneNumber} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersIdPut: async (id: string, phoneNumber?: PhoneNumber, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiPhoneNumbersIdPut', 'id', id)
            const localVarPath = `/api/PhoneNumbers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumber, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PhoneNumber} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersPost: async (phoneNumber?: PhoneNumber, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/PhoneNumbers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(phoneNumber, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhoneNumbersApi - functional programming interface
 * @export
 */
export const PhoneNumbersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhoneNumbersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPhoneNumbersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PhoneNumber>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPhoneNumbersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumbersApi.apiPhoneNumbersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPhoneNumbersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPhoneNumbersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumbersApi.apiPhoneNumbersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPhoneNumbersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPhoneNumbersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumbersApi.apiPhoneNumbersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {PhoneNumber} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPhoneNumbersIdPut(id: string, phoneNumber?: PhoneNumber, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPhoneNumbersIdPut(id, phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumbersApi.apiPhoneNumbersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PhoneNumber} [phoneNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPhoneNumbersPost(phoneNumber?: PhoneNumber, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhoneNumber>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPhoneNumbersPost(phoneNumber, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhoneNumbersApi.apiPhoneNumbersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhoneNumbersApi - factory interface
 * @export
 */
export const PhoneNumbersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhoneNumbersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<PhoneNumber>> {
            return localVarFp.apiPhoneNumbersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhoneNumbersApiApiPhoneNumbersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersIdDelete(requestParameters: PhoneNumbersApiApiPhoneNumbersIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPhoneNumbersIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhoneNumbersApiApiPhoneNumbersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersIdGet(requestParameters: PhoneNumbersApiApiPhoneNumbersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PhoneNumber> {
            return localVarFp.apiPhoneNumbersIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhoneNumbersApiApiPhoneNumbersIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersIdPut(requestParameters: PhoneNumbersApiApiPhoneNumbersIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiPhoneNumbersIdPut(requestParameters.id, requestParameters.phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PhoneNumbersApiApiPhoneNumbersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPhoneNumbersPost(requestParameters: PhoneNumbersApiApiPhoneNumbersPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PhoneNumber> {
            return localVarFp.apiPhoneNumbersPost(requestParameters.phoneNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiPhoneNumbersIdDelete operation in PhoneNumbersApi.
 * @export
 * @interface PhoneNumbersApiApiPhoneNumbersIdDeleteRequest
 */
export interface PhoneNumbersApiApiPhoneNumbersIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PhoneNumbersApiApiPhoneNumbersIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiPhoneNumbersIdGet operation in PhoneNumbersApi.
 * @export
 * @interface PhoneNumbersApiApiPhoneNumbersIdGetRequest
 */
export interface PhoneNumbersApiApiPhoneNumbersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PhoneNumbersApiApiPhoneNumbersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiPhoneNumbersIdPut operation in PhoneNumbersApi.
 * @export
 * @interface PhoneNumbersApiApiPhoneNumbersIdPutRequest
 */
export interface PhoneNumbersApiApiPhoneNumbersIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof PhoneNumbersApiApiPhoneNumbersIdPut
     */
    readonly id: string

    /**
     * 
     * @type {PhoneNumber}
     * @memberof PhoneNumbersApiApiPhoneNumbersIdPut
     */
    readonly phoneNumber?: PhoneNumber
}

/**
 * Request parameters for apiPhoneNumbersPost operation in PhoneNumbersApi.
 * @export
 * @interface PhoneNumbersApiApiPhoneNumbersPostRequest
 */
export interface PhoneNumbersApiApiPhoneNumbersPostRequest {
    /**
     * 
     * @type {PhoneNumber}
     * @memberof PhoneNumbersApiApiPhoneNumbersPost
     */
    readonly phoneNumber?: PhoneNumber
}

/**
 * PhoneNumbersApi - object-oriented interface
 * @export
 * @class PhoneNumbersApi
 * @extends {BaseAPI}
 */
export class PhoneNumbersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersApi
     */
    public apiPhoneNumbersGet(options?: RawAxiosRequestConfig) {
        return PhoneNumbersApiFp(this.configuration).apiPhoneNumbersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhoneNumbersApiApiPhoneNumbersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersApi
     */
    public apiPhoneNumbersIdDelete(requestParameters: PhoneNumbersApiApiPhoneNumbersIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return PhoneNumbersApiFp(this.configuration).apiPhoneNumbersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhoneNumbersApiApiPhoneNumbersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersApi
     */
    public apiPhoneNumbersIdGet(requestParameters: PhoneNumbersApiApiPhoneNumbersIdGetRequest, options?: RawAxiosRequestConfig) {
        return PhoneNumbersApiFp(this.configuration).apiPhoneNumbersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhoneNumbersApiApiPhoneNumbersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersApi
     */
    public apiPhoneNumbersIdPut(requestParameters: PhoneNumbersApiApiPhoneNumbersIdPutRequest, options?: RawAxiosRequestConfig) {
        return PhoneNumbersApiFp(this.configuration).apiPhoneNumbersIdPut(requestParameters.id, requestParameters.phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PhoneNumbersApiApiPhoneNumbersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhoneNumbersApi
     */
    public apiPhoneNumbersPost(requestParameters: PhoneNumbersApiApiPhoneNumbersPostRequest = {}, options?: RawAxiosRequestConfig) {
        return PhoneNumbersApiFp(this.configuration).apiPhoneNumbersPost(requestParameters.phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }
}

